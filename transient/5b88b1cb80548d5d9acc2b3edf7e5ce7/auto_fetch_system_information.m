function [cfg]=auto_fetch_system_information()
% function [cfg]=auto_fetch_system_information() 
%  
% % DO NOT EDITED THIS FILE
% %
% % This function was automatically generated by 
% % build_system.pl       
% %
% % It takes no arguemnts and returns the data structure 'cfg' 
% %
% % cfg.parameters contains a data structure of parameter informaiton
% %                .names
% %                .values
% %                .lower_bound
% %                .upper_bound
% %                .units
% %                      
% %                      
% % cfg.options.mi
% %                 
% % Contains fields corresponding to 
% % state, parameter, and output names that are used to map named values to their indices
% % in matlab. For example, if your system had a state Dp and it was the third state, 
% % you could get this information in the following way:
%  
% mymap = auto_map; 
% mymap.states.Dp
%
% % similarly the indices for parameters kel and outputs Dtot are accessed in the following
% % way:
%  
%  mymap.parameters.kel
%  mymap.outputs.Dtot





%creating cell array of parameter information
p.matrix = [{'name'}          {'value'}  {'lb'}     {'ub'}     {'units'}       {'editable'}    {'type'}        {'ptype'}      
            {'PNAME'}         1.0         eps         Inf         {'hr'}               {'yes'}              {'System'}           {'system'}          ];



% pulling out the info in fields 
p.names       = p.matrix(2:end,1);
p.values      = cell2mat(p.matrix(2:end,2));
p.lower_bound = cell2mat(p.matrix(2:end,3));
p.upper_bound = cell2mat(p.matrix(2:end,4));
p.units       = p.matrix(2:end,5);
p.editable    = p.matrix(2:end,6);
p.type        = p.matrix(2:end,7);
p.ptype       = p.matrix(2:end,8);



 %mapping state indices
 m.states.TMP         = 1; 



 %mapping parameter indices
 m.parameters.PNAME       = 1; 



 %mapping output indices
 m.outputs.TMP_OBS     = 1; 



 %mapping paramter sets indices
 m.parameter_sets_reverse = [];
 m.parameter_sets_reverse = [m.parameter_sets_reverse {'default'}];
 m.parameter_sets.default= 1; 


% No bolus events were specified


% No infusion rates were specified


% No covariates were specified
misc.output_times = 'linspace(0, 10, (10-0)/.1)' ;
misc.nonmem = 'HASH(0x555563469530)' ;
misc.amtify = 'HASH(0x5555635fe4f8)' ;



%Dumping timescale information 
time_scales.sys_time     = 1.0; 
data = struct(); 



%Defining parameter sets
p.sets.default.values  = p.values;
p.sets.default.name      = 'default';



%Defining IIV information
iiv      = struct(); 



%Defining variance equations
% No variance equations defined
% See: <VE>
ve      = struct(); 



% Creating the cfg data structures
% basically pulling it all together
cfg.parameters      = p;
cfg.options.mi      = m; 
cfg.iiv             = iiv;
cfg.ve              = ve; 
cfg.data.default    = data; 
cfg.options.verbose = 'yes'; %defaulting to displaying information
if(exist('inputs', 'var'))
  cfg.options.inputs = inputs;
end

% default simulation options:
cfg.options.simulation_options.model_name             = 'ode_simulation';
cfg.options.simulation_options.default_simopts.Solver = 'ode23s';
cfg.options.simulation_options.output_times           = linspace(0,10,1000)';
cfg.options.simulation_options.integrate_with                  = 'm-file';
cfg.options.simulation_options.include_important_output_times  = 'yes';

% hidden option to control printing in simulations
cfg.options.simulation_options.logging  = 'yes';

cfg.options.logging.enabled   = 'yes';
cfg.options.logging.file      = sprintf('transient%subiquity_log.txt', filesep);
cfg.options.logging.timestamp = 'yes';
cfg.options.logging.ts_str    = 'yyyy-mm-dd HH:MM:SS';


%Defining the default stochastic options
cfg.options.stochastic.nsub    = 100;
cfg.options.stochastic.seed    = 8675309;
cfg.options.stochastic.ci      = 95;
cfg.options.stochastic.ponly   = false ;

% By default all states and outputs will be included
cfg.options.stochastic.states  = fieldnames(cfg.options.mi.states);
cfg.options.stochastic.outputs = fieldnames(cfg.options.mi.outputs);

% Defining an empty cohort data structure:
cfg.cohorts                  = struct();

% Defining the default estimation options
cfg.estimation.observation_function           = 'system_od_general';
cfg.estimation.effort                         = 1;
cfg.estimation.optimizer                      = 'fminsearch';
cfg.estimation.monitor.status_function        = 'estimation_status';
cfg.estimation.monitor.exit_when_stable       = 'no';
cfg.estimation.monitor.iteration_history      = 100;
cfg.estimation.monitor.slope_tolerance        = 0.001;
cfg = system_select_set(cfg, 'default');

if(exist('misc', 'var'))
  cfg.options.misc = misc;
else
  cfg.options.misc = {};
end

if(exist('initial_conditions', 'var'))
  cfg.options.initial_conditions = initial_conditions;
end

if(exist('time_scales', 'var'))
 cfg.options.time_scales = time_scales;
end


cfg.options.model_details = [{'# Author: name <email>'}
{'#'}
{'# System Units:'}
{'#                '}
{'#   mass          [=] ?'}
{'#   volume        [=] ?'}
{'#   concentration [=] ?'}
{'#   time          [=] ?'}
{'# #-------------#'}
{'# | References  |'}
{'# #-------------#'}
{'#'}
{'# Common conversions'}
{'#'}
{'# Half-life to rate:'}
{'#'}
{'#        ln(2)'}
{'#  kel = -----'}
{'#        thalf'}
{'#'}
{'# Convert ng/ml to nM'}
{'#'}
{'#    ng   1000 ml        nmoles'}
{'#  X -- x ------- x --------------- = X/MW (KDA)'}
{'#    ml    1L       MW (KDA)*1000 ng'}
{'# '}
{'# Convert from nM to ng/ml:'}
{'#'}
{'# X nM  ===> X*MW(KDA) '}
{'# '}
{'# Converting dose in mpk to nmoles'}
{'#'}
{'#   mg            1e6 ng    1 nmole'}
{'# X -- x BW(kg) x ------ x -----------------  =>  X*1e3*BW/MW'}
{'#   kg            1 mg      MW (KDA) * 1000'}
{'#'}
{'#'}
{'# Converting dose in mpk to nM    '}
{'#'}
{'#   mg            1e6 ng    1 nmole             1'}
{'# X -- x BW(kg) x ------ x ----------------- x ---  =>  X*1e3*BW/MW/Vp'}
{'#   kg            1 mg      MW (KDA) * 1000    V(L)'}
{'#'}
{'# Define Sets'}
{'#'}
{'# <SET:SETNAME>  E1; E2; E3'}
{'# #-------------#'}
{'# | Parameters  |'}
{'# #-------------#'}
{'#'}
{'# System parameters'}
{'#     name                   value               lower             upper    units   editable    grouping'}
{'#                                                bound             bound            '}
{''}];